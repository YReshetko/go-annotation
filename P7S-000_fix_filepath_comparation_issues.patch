Subject: [PATCH] P7S-000 fix filepath comparation issues
---
Index: Makefile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Makefile b/Makefile
--- a/Makefile	(revision 106f3319384ce161bad2ec7ac2ba99cd4ebec885)
+++ b/Makefile	(revision 3110cfb89801d2be747129279405f9a6650ed077)
@@ -1,3 +1,8 @@
 .PHONY: gen-mapper
 gen-mapper:
-	go run examples/mapper/cmd/main.go .
\ No newline at end of file
+	go run examples/mapper/cmd/main.go .
+
+.PHONY: test
+test:
+	go clean -testcache
+	go test ./...
Index: examples/constructor/cmd/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/examples/constructor/cmd/main.go b/examples/constructor/cmd/main.go
--- a/examples/constructor/cmd/main.go	(revision 106f3319384ce161bad2ec7ac2ba99cd4ebec885)
+++ b/examples/constructor/cmd/main.go	(revision 3110cfb89801d2be747129279405f9a6650ed077)
@@ -2,6 +2,7 @@
 
 import (
 	_ "git.ftc.ru/p7s/libraries/go-annotation/annotations/constructor"
+	annotation "git.ftc.ru/p7s/libraries/go-annotation/pkg"
 )
 
 func main() {
Index: go.mod
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/go.mod b/go.mod
--- a/go.mod	(revision 106f3319384ce161bad2ec7ac2ba99cd4ebec885)
+++ b/go.mod	(revision 3110cfb89801d2be747129279405f9a6650ed077)
@@ -1,6 +1,6 @@
 module git.ftc.ru/p7s/libraries/go-annotation
 
-go 1.20
+go 1.22
 
 require (
 	github.com/davecgh/go-spew v1.1.1
Index: go.sum
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/go.sum b/go.sum
--- a/go.sum	(revision 106f3319384ce161bad2ec7ac2ba99cd4ebec885)
+++ b/go.sum	(revision 3110cfb89801d2be747129279405f9a6650ed077)
@@ -21,12 +21,14 @@
 github.com/maxbrunsfeld/counterfeiter/v6 v6.5.0 h1:rBhB9Rls+yb8kA4x5a/cWxOufWfXt24E+kq4YlbGj3g=
 github.com/maxbrunsfeld/counterfeiter/v6 v6.5.0/go.mod h1:fJ0UAZc1fx3xZhU4eSHQDJ1ApFmTVhp5VTpV9tm2ogg=
 github.com/onsi/gomega v1.18.1 h1:M1GfJqGRrBrrGGsbxzV5dqM2U2ApXefZCQpkukxYRLE=
+github.com/onsi/gomega v1.18.1/go.mod h1:0q+aL8jAiMXy9hbwj2mr5GziHiwhAIQpFmmtT5hitRs=
 github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=
 github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
 github.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=
 github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=
 github.com/sclevine/spec v1.4.0 h1:z/Q9idDcay5m5irkZ28M7PtQM4aOISzOpj4bUPkDee8=
+github.com/sclevine/spec v1.4.0/go.mod h1:LvpgJaFyvQzRvc1kaDs0bulYwzC70PbiYjC4QnFHkOM=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
 github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
@@ -39,14 +41,18 @@
 golang.org/x/mod v0.7.0 h1:LapD9S96VoQRhi/GrNTqeBJFrUjs5UHCAtTlgwA5oZA=
 golang.org/x/mod v0.7.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
 golang.org/x/net v0.1.0 h1:hZ/3BUoy5aId7sCpA/Tc5lt8DkFgdVS2onTpJsZ/fl0=
+golang.org/x/net v0.1.0/go.mod h1:Cx3nUiGt4eDBEyega/BKRp+/AlGL8hYe7U9odMt2Cco=
 golang.org/x/sys v0.1.0 h1:kunALQeHf1/185U1i0GOB/fy1IPRDDpuoOOqRReG57U=
 golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=
+golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
 golang.org/x/tools v0.2.0 h1:G6AHpWxTMGY1KyEYoAQ5WTtIekUUvDNjan3ugu60JvE=
 golang.org/x/tools v0.2.0/go.mod h1:y4OqIKeOV/fWJetJ8bXPU1sEVniLMIyDAZWeHdV+NTA=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
+gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=
 gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
+gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
 gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
Index: internal/lookup/fixtures/imports.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/lookup/fixtures/imports.go b/internal/lookup/fixtures/imports.go
--- a/internal/lookup/fixtures/imports.go	(revision 106f3319384ce161bad2ec7ac2ba99cd4ebec885)
+++ b/internal/lookup/fixtures/imports.go	(revision 3110cfb89801d2be747129279405f9a6650ed077)
@@ -3,6 +3,7 @@
 import (
 	"fmt"
 	mlog "log"
+	"log/slog"
 
 	. "github.com/davecgh/go-spew/spew"
 	_ "github.com/davecgh/go-spew/spew"
@@ -15,6 +16,7 @@
 func SomeTestFunction() {
 	fmt.Println("msg")
 	mlog.Println("msg")
+	_ = slog.Logger{}
 
 	_ = Config
 
Index: internal/lookup/imports.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/lookup/imports.go b/internal/lookup/imports.go
--- a/internal/lookup/imports.go	(revision 106f3319384ce161bad2ec7ac2ba99cd4ebec885)
+++ b/internal/lookup/imports.go	(revision 3110cfb89801d2be747129279405f9a6650ed077)
@@ -69,10 +69,22 @@
 func containsFile(files []string) func(string) bool {
 	return func(file string) bool {
 		for _, f := range files {
-			if strings.HasSuffix(f, file) {
+			if strings.HasSuffix(f, file) && isCompletePathSuffixMatch(f, file) {
 				return true
 			}
 		}
 		return false
 	}
 }
+
+// The check is required, because if we just check suffix for similar package ends:
+// log/example_test.go
+// log/slog/example_test.go
+// In this case both have equel suffix log/example_test.go, but this is completely different packages
+func isCompletePathSuffixMatch(str, suffix string) bool {
+	prefix := strings.TrimSuffix(str, suffix)
+	if len(prefix) == 0 {
+		return true
+	}
+	return prefix[len(prefix)-1] == '/' || prefix[len(prefix)-1] == '\\'
+}
Index: internal/lookup/imports_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/lookup/imports_test.go b/internal/lookup/imports_test.go
--- a/internal/lookup/imports_test.go	(revision 106f3319384ce161bad2ec7ac2ba99cd4ebec885)
+++ b/internal/lookup/imports_test.go	(revision 3110cfb89801d2be747129279405f9a6650ed077)
@@ -25,6 +25,7 @@
 	}{
 		{"fmt", "fmt"},
 		{"mlog", "log"},
+		{"slog", "log/slog"},
 		{".", "github.com/davecgh/go-spew/spew"},
 		{"_", "github.com/davecgh/go-spew/spew"},
 		{"spew", "github.com/davecgh/go-spew/spew"},
Index: internal/lookup/types_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/lookup/types_test.go b/internal/lookup/types_test.go
--- a/internal/lookup/types_test.go	(revision 106f3319384ce161bad2ec7ac2ba99cd4ebec885)
+++ b/internal/lookup/types_test.go	(revision 3110cfb89801d2be747129279405f9a6650ed077)
@@ -2,6 +2,7 @@
 
 import (
 	"go/ast"
+	"path/filepath"
 	"testing"
 
 	"github.com/stretchr/testify/assert"
@@ -17,7 +18,8 @@
 
 	node, parents, _, filePath, err := lookup.FindTypeByImport(m, "git.ftc.ru/p7s/libraries/go-annotation/internal/lookup/fixtures/dashed-package", "Exported2")
 	require.NoError(t, err)
-	assert.Contains(t, filePath, "src/git.ftc.ru/p7s/libraries/go-annotation/internal/lookup/fixtures/dashed-package/example2.go")
+	expectedSubPath := filepath.Clean("src/git.ftc.ru/p7s/libraries/go-annotation/internal/lookup/fixtures/dashed-package/example2.go")
+	assert.Contains(t, filePath, expectedSubPath)
 	assert.Len(t, parents, 3)
 
 	ts, ok := node.(*ast.TypeSpec)
@@ -44,7 +46,8 @@
 
 	node, parents, _, filePath, err := lookup.FindTypeInDir(m, "dashed-package", "Exported2")
 	require.NoError(t, err)
-	assert.Contains(t, filePath, "src/git.ftc.ru/p7s/libraries/go-annotation/internal/lookup/fixtures/dashed-package/example2.go")
+	expectedSubPath := filepath.Clean("src/git.ftc.ru/p7s/libraries/go-annotation/internal/lookup/fixtures/dashed-package/example2.go")
+	assert.Contains(t, filePath, expectedSubPath)
 	assert.Len(t, parents, 3)
 
 	ts, ok := node.(*ast.TypeSpec)
Index: internal/module/interface.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/module/interface.go b/internal/module/interface.go
--- a/internal/module/interface.go	(revision 106f3319384ce161bad2ec7ac2ba99cd4ebec885)
+++ b/internal/module/interface.go	(revision 3110cfb89801d2be747129279405f9a6650ed077)
@@ -65,6 +65,8 @@
 		return nil
 	}
 
+	importPath = filepath.Clean(importPath)
+
 	if nativeModule.isFromModCache() {
 		files := OfSlice(m.Files()).
 			Filter(isPotentialImport(importPath)).
@@ -94,6 +96,7 @@
 //	"internal/lookup/types.go"
 //	"internal/lookup/types_test.go"
 func FilesInDir(m Module, dir string) []string {
+	dir = filepath.Clean(dir)
 	return OfSlice(m.Files()).
 		Filter(hasPrefix(dir)).
 		Map(trimPrefix(dir)).
@@ -109,6 +112,7 @@
 // filePath - git.ftc.ru/p7s/libraries/go-annotation/internal/module/module.go
 // return - /home/<some-home>/go/src/git.ftc.ru/p7s/libraries/go-annotation/internal/module/module.go
 func AbsolutePath(m Module, filePath string) (string, bool) {
+	filePath = filepath.Clean(filePath)
 	path := OfSlice(m.Files()).
 		Filter(hasPostfix(filePath)).
 		Map(joinPath(m.Root())).
Index: internal/module/interface_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/module/interface_test.go b/internal/module/interface_test.go
--- a/internal/module/interface_test.go	(revision 106f3319384ce161bad2ec7ac2ba99cd4ebec885)
+++ b/internal/module/interface_test.go	(revision 3110cfb89801d2be747129279405f9a6650ed077)
@@ -22,11 +22,11 @@
 
 	assert.Equal(t, absRoot, m.Root())
 
-	assert.Contains(t, m.Files(), "internal/module/load.go")
-	assert.Contains(t, m.Files(), "internal/module/interface.go")
-	assert.Contains(t, m.Files(), "internal/module/interface_test.go")
-	assert.Contains(t, m.Files(), "internal/module/lookup.go")
-	assert.Contains(t, m.Files(), "internal/module/module.go")
+	assert.Contains(t, m.Files(), filepath.Clean("internal/module/load.go"))
+	assert.Contains(t, m.Files(), filepath.Clean("internal/module/interface.go"))
+	assert.Contains(t, m.Files(), filepath.Clean("internal/module/interface_test.go"))
+	assert.Contains(t, m.Files(), filepath.Clean("internal/module/lookup.go"))
+	assert.Contains(t, m.Files(), filepath.Clean("internal/module/module.go"))
 }
 
 func TestSubmodule_Success(t *testing.T) {
@@ -35,17 +35,16 @@
 
 	m, err = module.Find(m, "github.com/stretchr/testify/assert")
 	require.NoError(t, err)
-	assert.Contains(t, m.Root(), "pkg/mod/github.com/stretchr/testify@v1.8.1")
-
-	assert.Contains(t, m.Files(), "assert/assertion_compare.go")
-	assert.Contains(t, m.Files(), "assert/assertion_compare_can_convert.go")
-	assert.Contains(t, m.Files(), "mock/mock.go")
-	assert.Contains(t, m.Files(), "require/require.go")
-	assert.Contains(t, m.Files(), "package_test.go")
+	assert.Contains(t, m.Root(), filepath.Clean("pkg/mod/github.com/stretchr/testify@v1.8.1"))
+	assert.Contains(t, m.Files(), filepath.Clean("assert/assertion_compare.go"))
+	assert.Contains(t, m.Files(), filepath.Clean("assert/assertion_compare_can_convert.go"))
+	assert.Contains(t, m.Files(), filepath.Clean("mock/mock.go"))
+	assert.Contains(t, m.Files(), filepath.Clean("require/require.go"))
+	assert.Contains(t, m.Files(), filepath.Clean("package_test.go"))
 
 	m, err = module.Find(m, "gopkg.in/yaml.v3")
 	require.NoError(t, err)
-	assert.Contains(t, m.Root(), "pkg/mod/gopkg.in/yaml.v3@v3.0.1")
+	assert.Contains(t, m.Root(), filepath.Clean("pkg/mod/gopkg.in/yaml.v3@v3.0.1"))
 
 	assert.Contains(t, m.Files(), "decode.go")
 	assert.Contains(t, m.Files(), "encode.go")
@@ -57,17 +56,16 @@
 
 	m, err = module.Find(m, "github.com/stretchr/testify/assert")
 	require.NoError(t, err)
-	assert.Contains(t, m.Root(), "pkg/mod/github.com/stretchr/testify@v1.8.1")
-
-	assert.Contains(t, m.Files(), "assert/assertion_compare.go")
-	assert.Contains(t, m.Files(), "assert/assertion_compare_can_convert.go")
-	assert.Contains(t, m.Files(), "mock/mock.go")
-	assert.Contains(t, m.Files(), "require/require.go")
-	assert.Contains(t, m.Files(), "package_test.go")
+	assert.Contains(t, m.Root(), filepath.Clean("pkg/mod/github.com/stretchr/testify@v1.8.1"))
+	assert.Contains(t, m.Files(), filepath.Clean("assert/assertion_compare.go"))
+	assert.Contains(t, m.Files(), filepath.Clean("assert/assertion_compare_can_convert.go"))
+	assert.Contains(t, m.Files(), filepath.Clean("mock/mock.go"))
+	assert.Contains(t, m.Files(), filepath.Clean("require/require.go"))
+	assert.Contains(t, m.Files(), filepath.Clean("package_test.go"))
 
 	m, err = module.Find(m, "gopkg.in/yaml.v3")
 	require.NoError(t, err)
-	assert.Contains(t, m.Root(), "pkg/mod/gopkg.in/yaml.v3@v3.0.1")
+	assert.Contains(t, m.Root(), filepath.Clean("pkg/mod/gopkg.in/yaml.v3@v3.0.1"))
 
 	assert.Contains(t, m.Files(), "decode.go")
 	assert.Contains(t, m.Files(), "encode.go")
@@ -87,13 +85,13 @@
 	require.NoError(t, err)
 
 	files := module.FilesInPackage(m, "git.ftc.ru/p7s/libraries/go-annotation/internal/module")
-	require.Len(t, files, 5)
+	require.Len(t, files, 6)
 
-	assert.Contains(t, files, "git.ftc.ru/p7s/libraries/go-annotation/internal/module/load.go")
-	assert.Contains(t, files, "git.ftc.ru/p7s/libraries/go-annotation/internal/module/interface.go")
-	assert.Contains(t, files, "git.ftc.ru/p7s/libraries/go-annotation/internal/module/interface_test.go")
-	assert.Contains(t, files, "git.ftc.ru/p7s/libraries/go-annotation/internal/module/lookup.go")
-	assert.Contains(t, files, "git.ftc.ru/p7s/libraries/go-annotation/internal/module/module.go")
+	assert.Contains(t, files, filepath.Clean("git.ftc.ru/p7s/libraries/go-annotation/internal/module/load.go"))
+	assert.Contains(t, files, filepath.Clean("git.ftc.ru/p7s/libraries/go-annotation/internal/module/interface.go"))
+	assert.Contains(t, files, filepath.Clean("git.ftc.ru/p7s/libraries/go-annotation/internal/module/interface_test.go"))
+	assert.Contains(t, files, filepath.Clean("git.ftc.ru/p7s/libraries/go-annotation/internal/module/lookup.go"))
+	assert.Contains(t, files, filepath.Clean("git.ftc.ru/p7s/libraries/go-annotation/internal/module/module.go"))
 }
 
 func TestAbsolutePath(t *testing.T) {
@@ -103,7 +101,7 @@
 	s, ok := module.AbsolutePath(m, "git.ftc.ru/p7s/libraries/go-annotation/internal/module/module.go")
 	require.True(t, ok)
 
-	assert.Contains(t, s, "/src/git.ftc.ru/p7s/libraries/go-annotation/internal/module/module.go")
+	assert.Contains(t, s, filepath.Clean("/src/git.ftc.ru/p7s/libraries/go-annotation/internal/module/module.go"))
 }
 
 func TestAbsolutePath_NotFound(t *testing.T) {
@@ -120,10 +118,10 @@
 	require.NoError(t, err)
 
 	s := module.FilesInDir(m, "internal/lookup")
-	require.Len(t, s, 4)
+	require.Len(t, s, 7)
 
-	assert.Contains(t, s, "internal/lookup/imports.go")
-	assert.Contains(t, s, "internal/lookup/imports_test.go")
-	assert.Contains(t, s, "internal/lookup/types.go")
-	assert.Contains(t, s, "internal/lookup/types_test.go")
+	assert.Contains(t, s, filepath.Clean("internal/lookup/imports.go"))
+	assert.Contains(t, s, filepath.Clean("internal/lookup/imports_test.go"))
+	assert.Contains(t, s, filepath.Clean("internal/lookup/types.go"))
+	assert.Contains(t, s, filepath.Clean("internal/lookup/types_test.go"))
 }
Index: internal/module/module.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/module/module.go b/internal/module/module.go
--- a/internal/module/module.go	(revision 106f3319384ce161bad2ec7ac2ba99cd4ebec885)
+++ b/internal/module/module.go	(revision 3110cfb89801d2be747129279405f9a6650ed077)
@@ -3,6 +3,7 @@
 import (
 	"git.ftc.ru/p7s/libraries/go-annotation/internal/environment"
 	"git.ftc.ru/p7s/libraries/go-annotation/internal/logger"
+	"path/filepath"
 	"strings"
 
 	"golang.org/x/mod/modfile"
@@ -75,6 +76,7 @@
 // importPath: git.ftc.ru/p7s/libraries/go-annotation/examples/constructor/internal/common
 // result - true as m.root + m.files[i] contains importPath
 func (m *module) hasImportPath(importPath string) bool {
+	importPath = filepath.Clean(importPath)
 	path := OfSlice(m.files).
 		Map(joinPath(m.root)).
 		Filter(contains(importPath)).
Index: internal/output/storer_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/output/storer_test.go b/internal/output/storer_test.go
--- a/internal/output/storer_test.go	(revision 106f3319384ce161bad2ec7ac2ba99cd4ebec885)
+++ b/internal/output/storer_test.go	(revision 3110cfb89801d2be747129279405f9a6650ed077)
@@ -24,7 +24,7 @@
 	require.NoError(t, err)
 
 	assert.Contains(t, string(data), "// Code generated by TEST annotation processor. DO NOT EDIT.")
-	assert.Contains(t, string(data), "//\t\tTEST: 1.0.0")
+	assert.Contains(t, string(data), "TEST: 1.0.0")
 	assert.Contains(t, string(data), "package fixtures")
 }
 
@@ -46,7 +46,7 @@
 	require.NoError(t, err)
 
 	assert.Contains(t, string(data), "// Code generated by TEST annotation processor. DO NOT EDIT.")
-	assert.Contains(t, string(data), "//\t\tTEST: 1.0.0")
+	assert.Contains(t, string(data), "TEST: 1.0.0")
 	assert.Contains(t, string(data), "package fixtures")
 }
 
