// Code generated by Constructor annotation processor. DO NOT EDIT.
// versions:
//		go: go1.18.3
//		go-annotation: 0.0.19
//		Constructor: 1.0.0

package nodes

import (
	cache "github.com/YReshetko/go-annotation/annotations/mapper/generators/cache"
	annotation "github.com/YReshetko/go-annotation/pkg"
	ast "go/ast"
)

type ArrayTypeBuilder struct {
	_astArray_     *ast.ArrayType
	_impCache_     *cache.ImportCache
	_isPointer_    bool
	_node_         annotation.Node
	_parentImport_ string
}

func NewArrayTypeBuilder() *ArrayTypeBuilder {
	return &ArrayTypeBuilder{}
}

func (b *ArrayTypeBuilder) AstArray(v *ast.ArrayType) *ArrayTypeBuilder {
	b._astArray_ = v
	return b
}

func (b *ArrayTypeBuilder) ImpCache(v *cache.ImportCache) *ArrayTypeBuilder {
	b._impCache_ = v
	return b
}

func (b *ArrayTypeBuilder) IsPointer(v bool) *ArrayTypeBuilder {
	b._isPointer_ = v
	return b
}

func (b *ArrayTypeBuilder) Node(v annotation.Node) *ArrayTypeBuilder {
	b._node_ = v
	return b
}

func (b *ArrayTypeBuilder) ParentImport(v string) *ArrayTypeBuilder {
	b._parentImport_ = v
	return b
}

func (b *ArrayTypeBuilder) Build() *ArrayType {
	out := ArrayType{}

	out.astArray = b._astArray_
	out.impCache = b._impCache_
	out.isPointer = b._isPointer_
	out.node = b._node_
	out.parentImport = b._parentImport_

	out.buildType()

	return &out
}

type FieldBuilder struct {
	_astExpr_      ast.Expr
	_impCache_     *cache.ImportCache
	_name_         string
	_node_         annotation.Node
	_parentImport_ string
}

func NewFieldBuilder() *FieldBuilder {
	return &FieldBuilder{}
}

func (b *FieldBuilder) AstExpr(v ast.Expr) *FieldBuilder {
	b._astExpr_ = v
	return b
}

func (b *FieldBuilder) ImpCache(v *cache.ImportCache) *FieldBuilder {
	b._impCache_ = v
	return b
}

func (b *FieldBuilder) Name(v string) *FieldBuilder {
	b._name_ = v
	return b
}

func (b *FieldBuilder) Node(v annotation.Node) *FieldBuilder {
	b._node_ = v
	return b
}

func (b *FieldBuilder) ParentImport(v string) *FieldBuilder {
	b._parentImport_ = v
	return b
}

func (b *FieldBuilder) Build() *Field {
	out := Field{}

	out.astExpr = b._astExpr_
	out.impCache = b._impCache_
	out.name = b._name_
	out.node = b._node_
	out.parentImport = b._parentImport_

	out.buildType()

	return &out
}

type MapTypeBuilder struct {
	_astKeyExpr_   ast.Expr
	_astValueExpr_ ast.Expr
	_impCache_     *cache.ImportCache
	_isPointer_    bool
	_node_         annotation.Node
	_parentImport_ string
}

func NewMapTypeBuilder() *MapTypeBuilder {
	return &MapTypeBuilder{}
}

func (b *MapTypeBuilder) AstKeyExpr(v ast.Expr) *MapTypeBuilder {
	b._astKeyExpr_ = v
	return b
}

func (b *MapTypeBuilder) AstValueExpr(v ast.Expr) *MapTypeBuilder {
	b._astValueExpr_ = v
	return b
}

func (b *MapTypeBuilder) ImpCache(v *cache.ImportCache) *MapTypeBuilder {
	b._impCache_ = v
	return b
}

func (b *MapTypeBuilder) IsPointer(v bool) *MapTypeBuilder {
	b._isPointer_ = v
	return b
}

func (b *MapTypeBuilder) Node(v annotation.Node) *MapTypeBuilder {
	b._node_ = v
	return b
}

func (b *MapTypeBuilder) ParentImport(v string) *MapTypeBuilder {
	b._parentImport_ = v
	return b
}

func (b *MapTypeBuilder) Build() *MapType {
	out := MapType{}

	out.astKeyExpr = b._astKeyExpr_
	out.astValueExpr = b._astValueExpr_
	out.impCache = b._impCache_
	out.isPointer = b._isPointer_
	out.node = b._node_
	out.parentImport = b._parentImport_

	out.buildTypes()

	return &out
}

type PrimitiveTypeBuilder struct {
	_isPointer_ bool
	_name_      string
}

func NewPrimitiveTypeBuilder() *PrimitiveTypeBuilder {
	return &PrimitiveTypeBuilder{}
}

func (b *PrimitiveTypeBuilder) IsPointer(v bool) *PrimitiveTypeBuilder {
	b._isPointer_ = v
	return b
}

func (b *PrimitiveTypeBuilder) Name(v string) *PrimitiveTypeBuilder {
	b._name_ = v
	return b
}

func (b *PrimitiveTypeBuilder) Build() *PrimitiveType {
	out := PrimitiveType{}

	out.isPointer = b._isPointer_
	out.name = b._name_

	return &out
}

type StructTypeBuilder struct {
	_alias_        string
	_astStruct_    *ast.StructType
	_fields_       []*Field
	_impCache_     *cache.ImportCache
	_importPath_   string
	_isPointer_    bool
	_name_         string
	_node_         annotation.Node
	_parentImport_ string
}

func NewStructTypeBuilder() *StructTypeBuilder {
	return &StructTypeBuilder{}
}

func (b *StructTypeBuilder) Alias(v string) *StructTypeBuilder {
	b._alias_ = v
	return b
}

func (b *StructTypeBuilder) AstStruct(v *ast.StructType) *StructTypeBuilder {
	b._astStruct_ = v
	return b
}

func (b *StructTypeBuilder) Fields(v []*Field) *StructTypeBuilder {
	b._fields_ = v
	return b
}

func (b *StructTypeBuilder) ImpCache(v *cache.ImportCache) *StructTypeBuilder {
	b._impCache_ = v
	return b
}

func (b *StructTypeBuilder) ImportPath(v string) *StructTypeBuilder {
	b._importPath_ = v
	return b
}

func (b *StructTypeBuilder) IsPointer(v bool) *StructTypeBuilder {
	b._isPointer_ = v
	return b
}

func (b *StructTypeBuilder) Name(v string) *StructTypeBuilder {
	b._name_ = v
	return b
}

func (b *StructTypeBuilder) Node(v annotation.Node) *StructTypeBuilder {
	b._node_ = v
	return b
}

func (b *StructTypeBuilder) ParentImport(v string) *StructTypeBuilder {
	b._parentImport_ = v
	return b
}

func (b *StructTypeBuilder) Build() *StructType {
	out := StructType{}
	if b._fields_ == nil {
		b._fields_ = []*Field{}
	}

	out.alias = b._alias_
	out.astStruct = b._astStruct_
	out.fields = b._fields_
	out.impCache = b._impCache_
	out.importPath = b._importPath_
	out.isPointer = b._isPointer_
	out.name = b._name_
	out.node = b._node_
	out.parentImport = b._parentImport_

	out.buildFields()
	out.buildImportToken()

	return &out
}
