// Code generated by Constructor annotation processor. DO NOT EDIT.
// versions:
//		go: go1.18.3
//		go-annotation: 0.0.19
//		Constructor: 1.0.0

package generators

import (
	cache2 "github.com/YReshetko/go-annotation/annotations/mapper/generators/cache"
	nodes "github.com/YReshetko/go-annotation/annotations/mapper/generators/nodes"
	utils "github.com/YReshetko/go-annotation/annotations/mapper/utils"
	annotation "github.com/YReshetko/go-annotation/pkg"
	ast "go/ast"
)

type MapperGeneratorBuilder struct {
	_impCache_   *cache2.ImportCache
	_intName_    string
	_intType_    *ast.InterfaceType
	_mgs_        []*methodGenerator
	_node_       annotation.Node
	_structName_ string
}

func NewMapperGeneratorBuilder() *MapperGeneratorBuilder {
	return &MapperGeneratorBuilder{}
}

func (b *MapperGeneratorBuilder) ImpCache(v *cache2.ImportCache) *MapperGeneratorBuilder {
	b._impCache_ = v
	return b
}

func (b *MapperGeneratorBuilder) IntName(v string) *MapperGeneratorBuilder {
	b._intName_ = v
	return b
}

func (b *MapperGeneratorBuilder) IntType(v *ast.InterfaceType) *MapperGeneratorBuilder {
	b._intType_ = v
	return b
}

func (b *MapperGeneratorBuilder) Mgs(v []*methodGenerator) *MapperGeneratorBuilder {
	b._mgs_ = v
	return b
}

func (b *MapperGeneratorBuilder) Node(v annotation.Node) *MapperGeneratorBuilder {
	b._node_ = v
	return b
}

func (b *MapperGeneratorBuilder) StructName(v string) *MapperGeneratorBuilder {
	b._structName_ = v
	return b
}

func (b *MapperGeneratorBuilder) Build() *MapperGenerator {
	out := MapperGenerator{}
	if b._mgs_ == nil {
		b._mgs_ = []*methodGenerator{}
	}

	out.impCache = b._impCache_
	out.intName = b._intName_
	out.intType = b._intType_
	out.mgs = b._mgs_
	out.node = b._node_
	out.structName = b._structName_

	out.buildMethodGenerators()

	return &out
}

type cacheBuilder struct {
	_node_      *utils.Node[string, string]
	_varPrefix_ string
}

func newCache() *cacheBuilder {
	return &cacheBuilder{}
}

func (b *cacheBuilder) setNode(v *utils.Node[string, string]) *cacheBuilder {
	b._node_ = v
	return b
}

func (b *cacheBuilder) setVarPrefix(v string) *cacheBuilder {
	b._varPrefix_ = v
	return b
}

func (b *cacheBuilder) build() *cache {
	out := cache{}

	out.node = b._node_
	out.varPrefix = b._varPrefix_

	return &out
}

type methodGeneratorBuilder struct {
	_impCache_     *cache2.ImportCache
	_input_        []*ast.Field
	_inputFields_  []*nodes.Field
	_name_         string
	_node_         annotation.Node
	_output_       []*ast.Field
	_outputFields_ []*nodes.Field
	_overloading_  *overloading
}

func newMethodGeneratorBuilder() *methodGeneratorBuilder {
	return &methodGeneratorBuilder{}
}

func (b *methodGeneratorBuilder) setImpCache(v *cache2.ImportCache) *methodGeneratorBuilder {
	b._impCache_ = v
	return b
}

func (b *methodGeneratorBuilder) setInput(v []*ast.Field) *methodGeneratorBuilder {
	b._input_ = v
	return b
}

func (b *methodGeneratorBuilder) setInputFields(v []*nodes.Field) *methodGeneratorBuilder {
	b._inputFields_ = v
	return b
}

func (b *methodGeneratorBuilder) setName(v string) *methodGeneratorBuilder {
	b._name_ = v
	return b
}

func (b *methodGeneratorBuilder) setNode(v annotation.Node) *methodGeneratorBuilder {
	b._node_ = v
	return b
}

func (b *methodGeneratorBuilder) setOutput(v []*ast.Field) *methodGeneratorBuilder {
	b._output_ = v
	return b
}

func (b *methodGeneratorBuilder) setOutputFields(v []*nodes.Field) *methodGeneratorBuilder {
	b._outputFields_ = v
	return b
}

func (b *methodGeneratorBuilder) setOverloading(v *overloading) *methodGeneratorBuilder {
	b._overloading_ = v
	return b
}

func (b *methodGeneratorBuilder) build() *methodGenerator {
	out := methodGenerator{}
	if b._inputFields_ == nil {
		b._inputFields_ = []*nodes.Field{}
	}
	if b._outputFields_ == nil {
		b._outputFields_ = []*nodes.Field{}
	}

	out.impCache = b._impCache_
	out.input = b._input_
	out.inputFields = b._inputFields_
	out.name = b._name_
	out.node = b._node_
	out.output = b._output_
	out.outputFields = b._outputFields_
	out.overloading = b._overloading_

	out.buildOutput()
	out.buildInput()

	return &out
}

func newOverloading(isIgnoreDefault bool) *overloading {
	returnValue := &overloading{
		isIgnoreDefault: isIgnoreDefault,
		mappings:        make(map[string]mapping),
	}

	return returnValue
}
