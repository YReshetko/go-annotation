// Code generated by Validator annotation processor. DO NOT EDIT.
// versions:
//
//	go: go1.20.3
//	go-annotation: 0.1.0
//	Validator: 0.0.1
package internal

type SomeStructWithAnonymousValidator struct{}

func (v SomeStructWithAnonymousValidator) IsValid(value SomeStructWithAnonymous) bool {
	if value.an.f == 0 {
		return false
	}
	if value.an.i == 0 {
		return false
	}
	if value.an.s == "" {
		return false
	}
	if value.an.inter == nil {
		return false
	}
	if value.an.fn == nil {
		return false
	}

	return true
}

type SomeStructWithEmbeddingValidator struct{}

func (v SomeStructWithEmbeddingValidator) IsValid(value SomeStructWithEmbedding) bool {
	if value.ToEmbed.a == 0 {
		return false
	}
	if value.ToEmbed.b == 0 {
		return false
	}
	if value.ToEmbed.s == nil {
		return false
	}

	return true
}

type AnotherStructWithEmbeddingValidator struct{}

func (v AnotherStructWithEmbeddingValidator) IsValid(value AnotherStructWithEmbedding) bool {
	if value.ToEmbed == nil {
		return false
	}
	if value.ToEmbed.a == 0 {
		return false
	}
	if value.ToEmbed.b == 0 {
		return false
	}
	if value.ToEmbed.s == nil {
		return false
	}

	return true
}

type SomeStructWithFuncValidator struct{}

func (v SomeStructWithFuncValidator) IsValid(value SomeStructWithFunc) bool {
	if value.fn == nil {
		return false
	}
	if value.fn2 == nil {
		return false
	}

	return true
}

type PointerValidationValidator struct{}

func (v PointerValidationValidator) IsValid(value PointerValidation) bool {
	if value.sis == nil {
		return false
	}
	if value.sis.m == nil {
		return false
	}
	if value.sis.m2 == nil {
		return false
	}
	if value.sis.s == nil {
		return false
	}
	if value.sis.s2 == nil {
		return false
	}
	if value.sis.s3 == nil {
		return false
	}
	if value.sis.d == 0 {
		return false
	}
	if value.sis.b2 == nil {
		return false
	}
	if value.sis.i == nil {
		return false
	}
	if value.sis.i2 == nil {
		return false
	}
	if value.sis.i3 == nil {
		return false
	}
	if value.sis.i4 == nil {
		return false
	}
	if value.sis2.m == nil {
		return false
	}
	if value.sis2.m2 == nil {
		return false
	}
	if value.sis2.s == nil {
		return false
	}
	if value.sis2.s2 == nil {
		return false
	}
	if value.sis2.s3 == nil {
		return false
	}
	if value.sis2.d == 0 {
		return false
	}
	if value.sis2.b2 == nil {
		return false
	}
	if value.sis2.i == nil {
		return false
	}
	if value.sis2.i2 == nil {
		return false
	}
	if value.sis2.i3 == nil {
		return false
	}
	if value.sis2.i4 == nil {
		return false
	}
	if value.s == nil {
		return false
	}
	if value.d == 0 {
		return false
	}
	if value.m == nil {
		return false
	}

	return true
}

type UserValidator struct{}

func (v UserValidator) IsValid(value User) bool {
	if value.Name == "" {
		return false
	}
	if value.Surname == "" {
		return false
	}
	if value.Age == 0 {
		return false
	}
	if value.Route == 0 {
		return false
	}
	if value.Consumer.Key == "" {
		return false
	}
	if value.Consumer.Secret == "" {
		return false
	}

	return true
}

type TaggedExampleValidator struct{}

func (v TaggedExampleValidator) IsValid(value TaggedExample) bool {
	if value.Surname == "" {
		return false
	}
	if value.Age == 0 {
		return false
	}
	if value.Route == 0 {
		return false
	}

	return true
}

type SomeStructWithRefValidator struct{}

func (v SomeStructWithRefValidator) IsValid(value SomeStructWithRef) bool {
	if value.ssip.Name == "" {
		return false
	}
	if value.ssip.Name2 == nil {
		return false
	}
	if value.ssip.Surname == "" {
		return false
	}
	if value.ssip.Age == 0 {
		return false
	}
	if value.ssip.Route == 0 {
		return false
	}
	if value.ssip.Consumer.Name == "" {
		return false
	}
	if value.ssip.Consumer.Name2 == nil {
		return false
	}
	if value.ssip.Consumer.Surname == "" {
		return false
	}
	if value.ssip.Consumer.Age == nil {
		return false
	}
	if value.ssip.Consumer.Route == 0 {
		return false
	}
	if value.ssip.Consumer.Asip.Route == 0 {
		return false
	}
	if value.ssip.Consumer.Asip2 == nil {
		return false
	}
	if value.ssip.Consumer.Asip2.Route == 0 {
		return false
	}
	if value.ssip.Consumer2 == nil {
		return false
	}
	if value.ssip.Consumer2.Name == "" {
		return false
	}
	if value.ssip.Consumer2.Name2 == nil {
		return false
	}
	if value.ssip.Consumer2.Surname == "" {
		return false
	}
	if value.ssip.Consumer2.Age == nil {
		return false
	}
	if value.ssip.Consumer2.Route == 0 {
		return false
	}
	if value.ssip.Consumer2.Asip.Route == 0 {
		return false
	}
	if value.ssip.Consumer2.Asip2 == nil {
		return false
	}
	if value.ssip.Consumer2.Asip2.Route == 0 {
		return false
	}
	if value.ssip2 == nil {
		return false
	}

	return true
}

type SomeStructWithEmbeddingRefValidator struct{}

func (v SomeStructWithEmbeddingRefValidator) IsValid(value SomeStructWithEmbeddingRef) bool {
	if value.SomeStructInPkg.Name == "" {
		return false
	}
	if value.SomeStructInPkg.Name2 == nil {
		return false
	}
	if value.SomeStructInPkg.Surname == "" {
		return false
	}
	if value.SomeStructInPkg.Age == 0 {
		return false
	}
	if value.SomeStructInPkg.Route == 0 {
		return false
	}
	if value.SomeStructInPkg.Consumer.Name == "" {
		return false
	}
	if value.SomeStructInPkg.Consumer.Name2 == nil {
		return false
	}
	if value.SomeStructInPkg.Consumer.Surname == "" {
		return false
	}
	if value.SomeStructInPkg.Consumer.Age == nil {
		return false
	}
	if value.SomeStructInPkg.Consumer.Route == 0 {
		return false
	}
	if value.SomeStructInPkg.Consumer.Asip.Route == 0 {
		return false
	}
	if value.SomeStructInPkg.Consumer.Asip2 == nil {
		return false
	}
	if value.SomeStructInPkg.Consumer.Asip2.Route == 0 {
		return false
	}
	if value.SomeStructInPkg.Consumer2 == nil {
		return false
	}
	if value.SomeStructInPkg.Consumer2.Name == "" {
		return false
	}
	if value.SomeStructInPkg.Consumer2.Name2 == nil {
		return false
	}
	if value.SomeStructInPkg.Consumer2.Surname == "" {
		return false
	}
	if value.SomeStructInPkg.Consumer2.Age == nil {
		return false
	}
	if value.SomeStructInPkg.Consumer2.Route == 0 {
		return false
	}
	if value.SomeStructInPkg.Consumer2.Asip.Route == 0 {
		return false
	}
	if value.SomeStructInPkg.Consumer2.Asip2 == nil {
		return false
	}
	if value.SomeStructInPkg.Consumer2.Asip2.Route == 0 {
		return false
	}
	if value.ssip2 == nil {
		return false
	}

	return true
}

type SomeStructWithMyTypeRefValidator struct{}

func (v SomeStructWithMyTypeRefValidator) IsValid(value SomeStructWithMyTypeRef) bool {
	if value.ssip2 == nil {
		return false
	}

	return true
}
