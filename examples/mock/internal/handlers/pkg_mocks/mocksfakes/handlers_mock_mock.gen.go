// Code generated by Mock annotation processor. DO NOT EDIT.
// versions:
//		go-annotation: 0.0.4-alpha
//		Mock: 0.0.1
// Code generated by counterfeiter. DO NOT EDIT.
package mocksfakes

import (
	"net/http"
	"sync"

	"github.com/YReshetko/go-annotation/examples/mock/internal/handlers/pkg_mocks"
)

type HandlersMockMock struct {
	DoSomeAnotherStub        func(http.Response)
	doSomeAnotherMutex       sync.RWMutex
	doSomeAnotherArgsForCall []struct {
		arg1 http.Response
	}
	DoSomethingStub        func(http.Request)
	doSomethingMutex       sync.RWMutex
	doSomethingArgsForCall []struct {
		arg1 http.Request
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HandlersMockMock) DoSomeAnother(arg1 http.Response) {
	fake.doSomeAnotherMutex.Lock()
	fake.doSomeAnotherArgsForCall = append(fake.doSomeAnotherArgsForCall, struct {
		arg1 http.Response
	}{arg1})
	stub := fake.DoSomeAnotherStub
	fake.recordInvocation("DoSomeAnother", []interface{}{arg1})
	fake.doSomeAnotherMutex.Unlock()
	if stub != nil {
		fake.DoSomeAnotherStub(arg1)
	}
}

func (fake *HandlersMockMock) DoSomeAnotherCallCount() int {
	fake.doSomeAnotherMutex.RLock()
	defer fake.doSomeAnotherMutex.RUnlock()
	return len(fake.doSomeAnotherArgsForCall)
}

func (fake *HandlersMockMock) DoSomeAnotherCalls(stub func(http.Response)) {
	fake.doSomeAnotherMutex.Lock()
	defer fake.doSomeAnotherMutex.Unlock()
	fake.DoSomeAnotherStub = stub
}

func (fake *HandlersMockMock) DoSomeAnotherArgsForCall(i int) http.Response {
	fake.doSomeAnotherMutex.RLock()
	defer fake.doSomeAnotherMutex.RUnlock()
	argsForCall := fake.doSomeAnotherArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HandlersMockMock) DoSomething(arg1 http.Request) {
	fake.doSomethingMutex.Lock()
	fake.doSomethingArgsForCall = append(fake.doSomethingArgsForCall, struct {
		arg1 http.Request
	}{arg1})
	stub := fake.DoSomethingStub
	fake.recordInvocation("DoSomething", []interface{}{arg1})
	fake.doSomethingMutex.Unlock()
	if stub != nil {
		fake.DoSomethingStub(arg1)
	}
}

func (fake *HandlersMockMock) DoSomethingCallCount() int {
	fake.doSomethingMutex.RLock()
	defer fake.doSomethingMutex.RUnlock()
	return len(fake.doSomethingArgsForCall)
}

func (fake *HandlersMockMock) DoSomethingCalls(stub func(http.Request)) {
	fake.doSomethingMutex.Lock()
	defer fake.doSomethingMutex.Unlock()
	fake.DoSomethingStub = stub
}

func (fake *HandlersMockMock) DoSomethingArgsForCall(i int) http.Request {
	fake.doSomethingMutex.RLock()
	defer fake.doSomethingMutex.RUnlock()
	argsForCall := fake.doSomethingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HandlersMockMock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.doSomeAnotherMutex.RLock()
	defer fake.doSomeAnotherMutex.RUnlock()
	fake.doSomethingMutex.RLock()
	defer fake.doSomethingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HandlersMockMock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pkg_mocks.HandlersMock = new(HandlersMockMock)
