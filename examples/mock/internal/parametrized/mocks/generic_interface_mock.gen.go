// Code generated by Mock annotation processor. DO NOT EDIT.
// versions:
//
//	go: go1.22.4
//	go-annotation: 0.1.0
//	Mock: 0.0.1
//
// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/YReshetko/go-annotation/examples/mock/internal/parametrized"
)

type GenericInterfaceMock struct {
	GetStub        func() float32
	getMutex       sync.RWMutex
	getArgsForCall []struct {
	}
	getReturns struct {
		result1 float32
	}
	getReturnsOnCall map[int]struct {
		result1 float32
	}
	ProcessStub        func(int, []float32) (chan int, float32)
	processMutex       sync.RWMutex
	processArgsForCall []struct {
		arg1 int
		arg2 []float32
	}
	processReturns struct {
		result1 chan int
		result2 float32
	}
	processReturnsOnCall map[int]struct {
		result1 chan int
		result2 float32
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *GenericInterfaceMock) Get() float32 {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
	}{})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *GenericInterfaceMock) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *GenericInterfaceMock) GetCalls(stub func() float32) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *GenericInterfaceMock) GetReturns(result1 float32) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 float32
	}{result1}
}

func (fake *GenericInterfaceMock) GetReturnsOnCall(i int, result1 float32) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 float32
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 float32
	}{result1}
}

func (fake *GenericInterfaceMock) Process(arg1 int, arg2 []float32) (chan int, float32) {
	var arg2Copy []float32
	if arg2 != nil {
		arg2Copy = make([]float32, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.processMutex.Lock()
	ret, specificReturn := fake.processReturnsOnCall[len(fake.processArgsForCall)]
	fake.processArgsForCall = append(fake.processArgsForCall, struct {
		arg1 int
		arg2 []float32
	}{arg1, arg2Copy})
	stub := fake.ProcessStub
	fakeReturns := fake.processReturns
	fake.recordInvocation("Process", []interface{}{arg1, arg2Copy})
	fake.processMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *GenericInterfaceMock) ProcessCallCount() int {
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	return len(fake.processArgsForCall)
}

func (fake *GenericInterfaceMock) ProcessCalls(stub func(int, []float32) (chan int, float32)) {
	fake.processMutex.Lock()
	defer fake.processMutex.Unlock()
	fake.ProcessStub = stub
}

func (fake *GenericInterfaceMock) ProcessArgsForCall(i int) (int, []float32) {
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	argsForCall := fake.processArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *GenericInterfaceMock) ProcessReturns(result1 chan int, result2 float32) {
	fake.processMutex.Lock()
	defer fake.processMutex.Unlock()
	fake.ProcessStub = nil
	fake.processReturns = struct {
		result1 chan int
		result2 float32
	}{result1, result2}
}

func (fake *GenericInterfaceMock) ProcessReturnsOnCall(i int, result1 chan int, result2 float32) {
	fake.processMutex.Lock()
	defer fake.processMutex.Unlock()
	fake.ProcessStub = nil
	if fake.processReturnsOnCall == nil {
		fake.processReturnsOnCall = make(map[int]struct {
			result1 chan int
			result2 float32
		})
	}
	fake.processReturnsOnCall[i] = struct {
		result1 chan int
		result2 float32
	}{result1, result2}
}

func (fake *GenericInterfaceMock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *GenericInterfaceMock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ parametrized.GenericInterfaceMock = new(GenericInterfaceMock)
